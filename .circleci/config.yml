defaults: &defaults
  docker:
    - image: timjdfletcher/infrabox
  working_directory: /home/circleci/project

version: 2
jobs:
  dummy:
    <<: *defaults
    steps:
      - run:
          command: echo "Fan-out step"

  firstTimeSetup:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/create_tf_state_bucket.sh $TRAINING_COHORT;
            ./scripts/create_key_pair.sh $TRAINING_COHORT;
            ./scripts/create_tf_state_bucket.sh $TRAINING_COHORT_TEST;
            gst./scripts/create_key_pair.sh $TRAINING_COHORT_TEST;

  planTestEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST base_networking plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST bastion plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_bucket plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_emr_cluster plan -input=false -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_kafka plan -input=false -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST ingester plan -input=false -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST monitoring_dashboard plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST monitoring_alarm plan -input=false;

  buildTestEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST base_networking apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST bastion apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_bucket apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_emr_cluster apply -input=false -auto-approve -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_kafka apply -input=false -auto-approve -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST ingester apply -input=false -auto-approve -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST monitoring_dashboard apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST monitoring_alarm apply -input=false -auto-approve;

  destroyTestEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST client_vpn destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST monitoring_dashboard destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST monitoring_alarm destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST ingester destroy -input=false -auto-approve -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_kafka destroy -input=false -auto-approve -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_emr_cluster destroy -input=false -auto-approve -var-file=test-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST training_bucket destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST bastion destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT_TEST base_networking destroy -input=false -auto-approve;

  planProductionEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT base_networking plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT bastion plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster plan -input=false -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka plan -input=false -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT ingester plan -input=false -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard plan -input=false;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_alarm plan -input=false;

  buildProductionEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT base_networking apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT bastion apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster apply -input=false -auto-approve -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka apply -input=false -auto-approve -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT ingester apply -input=false -auto-approve -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_alarm apply -input=false -auto-approve;

  planClientVPN:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn plan -input=false;

  buildClientVPN:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn apply -input=false -auto-approve;

  buildAMIs:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/build_ami.sh training_kafka ;
            ./scripts/build_ami.sh training_ingester ;

  destroyProductionEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_alarm destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT ingester destroy -input=false -auto-approve -var-file=prod-env.tfvars ;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka destroy -input=false -auto-approve -var-file=prod-env.tfvars ;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster destroy -input=false -auto-approve -var-file=prod-env.tfvars ;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT bastion destroy -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT base_networking destroy -input=false -auto-approve;

workflows:
  version: 2
  build:
    jobs:
      - dummy

      - approvefirstTimeSetup:
          type: approval
          requires:
            - dummy
      - firstTimeSetup:
          requires:
            - approvefirstTimeSetup

      - approvebuildAMIs:
          type: approval
          requires:
            - dummy
      - buildAMIs:
          requires:
            - approvebuildAMIs

      - planTestEnvironment:
          requires:
            - dummy
      - approveBuildTestEnvironment:
          type: approval
          requires:
            - planTestEnvironment
      - buildTestEnvironment:
          requires:
            - approveBuildTestEnvironment

      - approveDestroyTestEnvironment:
          type: approval
          requires:
            - dummy
      - destroyTestEnvironment:
          requires:
            - approveDestroyTestEnvironment

      - planProductionEnvironment:
          requires:
            - buildTestEnvironment
      - approveBuildProductionEnvironment:
          type: approval
          requires:
            - planProductionEnvironment
      - buildProductionEnvironment:
          requires:
            - approveBuildProductionEnvironment

      - planClientVPN:
          requires:
            - dummy
      - approvebuildClientVPN:
          type: approval
          requires:
            - planClientVPN
      - buildClientVPN:
          requires:
            - approvebuildClientVPN

      - approveDestroyProductionEnvironment:
          type: approval
          requires:
            - dummy
      - destroyProductionEnvironment:
          requires:
            - approveDestroyProductionEnvironment
